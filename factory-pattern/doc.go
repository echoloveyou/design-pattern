package factory_pattern

/*
=============工厂模式模式===================
	1.定义：抽象工厂模式 =>  提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指定具体类
		   工厂方法模式 =>  定义一个创建对象的接口，但由于子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类
	2. simpleFactory.go 文件里是网上多数说这种是工厂模式，但是其实并不是，对比下面我讲的你就会感觉的到。
		=>> 工厂方法模式
		在pizza.go文件里面我们定义了一些披萨，重点在pizzaStore.go文件 我们向上面定义的那样先定义一个创建对象的接口
		定义店面超类PizzaStore 然后定义预定披萨的方法。可以看见根据类型不同创建不同的披萨。我们这个超类可能看着有点奇怪。怎么就一个接口
		这个接口让其他的店面实现create的接口传入PizzaStory实例详情在NewPizzaStore可以看见。根据具体店面去实现create去创建对象。像上面说的
		让实例化推迟到子类。虽然看着和上面的简单工厂差不多。但是，明显可以看到代码的扩展性。
		=>> 抽象工厂模式

*/